// schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model Post {
  id         String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  title      String
  content    String?
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String     @db.ObjectId
}


model Wallet {
  id         String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  address    String     @unique
  chain      String
  nonce      Int
  master     User       @relation(fields: [masterId], references: [id])
  masterId   String     @db.ObjectId
}


model User {
  id            String   @id @default(dbgenerated()) @db.ObjectId @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  posts         Post[]
  wallets       Wallet[]

  @@map("users")
}

model Account {
  id                 String    @id @default(dbgenerated()) @db.ObjectId @map("_id")
  compoundId         String    @unique @map(name: "compound_id")
  userId             String    @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(dbgenerated()) @db.ObjectId @map("_id")
  userId       String   @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         String   @id @default(dbgenerated()) @db.ObjectId @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt      @map(name: "updated_at")

  @@unique([identifier, token])
}
